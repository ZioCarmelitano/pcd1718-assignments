group 'pcd'
version '1.0'

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

apply plugin: 'javafx-gradle-plugin'

jfx {
    // minimal requirement for jfxJar-task
    mainClass = 'pcd.ass01.Launcher'

    // minimal requirement for jfxNative-task
    vendor = 'MMN'
}

sourceSets.main {
    java {
        srcDir 'src/main/java'
    }
    resources {
        srcDirs = ['src/main/java', 'src/main/resources']
        exclude "**/*.java"
    }
}

ext {
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'
    guavaVersion = '24.1-jre'
    junitVersion = '4.12'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    compile group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

    compile group: 'com.google.guava', name: 'guava', version: guavaVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
}

task runBenchmark(type: JavaExec) {
    main = 'pcd.ass01.Benchmark'
    classpath = sourceSets.main.runtimeClasspath
}

task runGui(type: JavaExec) {
    main = 'pcd.ass01.Launcher'
    classpath = sourceSets.main.runtimeClasspath
}

task mkBenchmarkJar(type: Jar) {
    def mainClass = 'pcd.ass01.Benchmark'
    manifest {
        attributes 'Main-Class': mainClass
    }
    archiveName = mainClass.drop(mainClass.lastIndexOf(".") + 1).toLowerCase()
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task mkGuiJar(type: Jar) {
    def mainClass = 'pcd.ass01.Benchmark'
    manifest {
        attributes 'Main-Class': mainClass
    }
    archiveName = mainClass.drop(mainClass.lastIndexOf(".") + 1).toLowerCase()
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}
